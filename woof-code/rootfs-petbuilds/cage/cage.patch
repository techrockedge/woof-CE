diff -rupN cage-3321daef98e07b1ea16f12875cc75f470f1f6325-orig/cage.1.scd cage-3321daef98e07b1ea16f12875cc75f470f1f6325/cage.1.scd
--- cage-3321daef98e07b1ea16f12875cc75f470f1f6325-orig/cage.1.scd	2022-01-03 17:44:36.741310651 +0800
+++ cage-3321daef98e07b1ea16f12875cc75f470f1f6325/cage.1.scd	2022-01-03 17:44:41.921310484 +0800
@@ -27,6 +27,11 @@ activities outside the scope of the runn
 	*last* Cage uses only the last connected monitor.
 	*extend* Cage extends the display across all connected monitors.
 
+*-e* <mode>
+	Set the monitor addition mode, if display is extended across all connected monitors.
+	*auto* Cage places monitors automatically.
+	*right* Cage places each newly-connected monitor on the right of the rightmost connected monitor.
+
 *-r*
 	Rotate the output 90 degrees clockwise. This can be specified up to three
 	times, each resulting in an additional 90 degrees clockwise rotation.
diff -rupN cage-3321daef98e07b1ea16f12875cc75f470f1f6325-orig/cage.c cage-3321daef98e07b1ea16f12875cc75f470f1f6325/cage.c
--- cage-3321daef98e07b1ea16f12875cc75f470f1f6325-orig/cage.c	2022-01-03 17:44:36.741310651 +0800
+++ cage-3321daef98e07b1ea16f12875cc75f470f1f6325/cage.c	2022-01-03 17:44:41.929310483 +0800
@@ -36,6 +36,9 @@
 #if CAGE_HAS_XWAYLAND
 #include <wlr/types/wlr_xcursor_manager.h>
 #endif
+#include <wlr/types/wlr_output_management_v1.h>
+#include <wlr/types/wlr_pointer_constraints_v1.h>
+#include <wlr/types/wlr_relative_pointer_v1.h>
 #include <wlr/types/wlr_xdg_decoration_v1.h>
 #include <wlr/types/wlr_xdg_output_v1.h>
 #include <wlr/types/wlr_xdg_shell.h>
@@ -149,6 +152,8 @@ cleanup_primary_client(pid_t pid)
 static bool
 drop_permissions(void)
 {
+	return true;
+
 	if (getuid() != geteuid() || getgid() != getegid()) {
 		// Set the gid and uid in the correct order.
 		if (setgid(getgid()) != 0 || setuid(getuid()) != 0) {
@@ -192,6 +197,8 @@ usage(FILE *file, const char *cage)
 		" -h\t Display this help message\n"
 		" -m extend Extend the display across all connected outputs (default)\n"
 		" -m last Use only the last connected output\n"
+		" -e auto Automatically place newly connected outputs (default)\n"
+		" -e right Place newly connected outputs on the right\n"
 		" -r\t Rotate the output 90 degrees clockwise, specify up to three times\n"
 		" -s\t Allow VT switching\n"
 		" -v\t Show the version number and exit\n"
@@ -204,7 +211,7 @@ static bool
 parse_args(struct cg_server *server, int argc, char *argv[])
 {
 	int c;
-	while ((c = getopt(argc, argv, "dhm:rsv")) != -1) {
+	while ((c = getopt(argc, argv, "dhm:e:rsv")) != -1) {
 		switch (c) {
 		case 'd':
 			server->xdg_decoration = true;
@@ -219,6 +226,13 @@ parse_args(struct cg_server *server, int
 				server->output_mode = CAGE_MULTI_OUTPUT_MODE_EXTEND;
 			}
 			break;
+		case 'e':
+			if (strcmp(optarg, "right") == 0) {
+				server->output_extend_mode = CAGE_OUTPUT_EXTEND_MODE_RIGHT;
+			} else if (strcmp(optarg, "auto") == 0) {
+				server->output_extend_mode = CAGE_OUTPUT_EXTEND_MODE_AUTO;
+			}
+			break;
 		case 'r':
 			server->output_transform++;
 			if (server->output_transform > WL_OUTPUT_TRANSFORM_270) {
@@ -452,6 +466,17 @@ main(int argc, char *argv[])
 		goto end;
 	}
 
+	server.output_manager_v1 = wlr_output_manager_v1_create(server.wl_display);
+	if (!server.output_manager_v1) {
+		wlr_log(WLR_ERROR, "Unable to create the output manager");
+		ret = 1;
+		goto end;
+	}
+	server.output_manager_apply.notify = handle_output_manager_apply;
+	wl_signal_add(&server.output_manager_v1->events.apply, &server.output_manager_apply);
+	server.output_manager_test.notify = handle_output_manager_test;
+	wl_signal_add(&server.output_manager_v1->events.test, &server.output_manager_test);
+
 	gamma_control_manager = wlr_gamma_control_manager_v1_create(server.wl_display);
 	if (!gamma_control_manager) {
 		wlr_log(WLR_ERROR, "Unable to create the gamma control manager");
@@ -459,6 +484,12 @@ main(int argc, char *argv[])
 		goto end;
 	}
 
+	server.relative_pointer_manager = wlr_relative_pointer_manager_v1_create(server.wl_display);
+	server.constraints = wlr_pointer_constraints_v1_create(server.wl_display);
+
+	server.new_constraint.notify = seat_create_constraint;
+	wl_signal_add(&server.constraints->events.new_constraint, &server.new_constraint);
+
 #if CAGE_HAS_XWAYLAND
 	xwayland = wlr_xwayland_create(server.wl_display, compositor, true);
 	if (!xwayland) {
diff -rupN cage-3321daef98e07b1ea16f12875cc75f470f1f6325-orig/meson.build cage-3321daef98e07b1ea16f12875cc75f470f1f6325/meson.build
--- cage-3321daef98e07b1ea16f12875cc75f470f1f6325-orig/meson.build	2022-01-03 17:44:36.741310651 +0800
+++ cage-3321daef98e07b1ea16f12875cc75f470f1f6325/meson.build	2022-01-03 17:44:41.929310483 +0800
@@ -40,6 +40,7 @@ wayland_protos = dependency('wayland-pro
 wayland_server = dependency('wayland-server')
 xkbcommon      = dependency('xkbcommon')
 math           = cc.find_library('m')
+libinput       = dependency('libinput')
 
 wl_protocol_dir = wayland_protos.get_pkgconfig_variable('pkgdatadir')
 wayland_scanner = find_program('wayland-scanner')
@@ -51,6 +52,7 @@ wayland_scanner_server = generator(
 
 server_protocols = [
   [wl_protocol_dir, 'stable/xdg-shell/xdg-shell.xml'],
+  [wl_protocol_dir, 'unstable/pointer-constraints/pointer-constraints-unstable-v1.xml'],
 ]
 
 server_protos_headers = []
@@ -155,6 +157,7 @@ executable(
     wlroots,
     xkbcommon,
     math,
+    libinput,
   ],
   install: true,
 )
diff -rupN cage-3321daef98e07b1ea16f12875cc75f470f1f6325-orig/output.c cage-3321daef98e07b1ea16f12875cc75f470f1f6325/output.c
--- cage-3321daef98e07b1ea16f12875cc75f470f1f6325-orig/output.c	2022-01-03 17:44:36.741310651 +0800
+++ cage-3321daef98e07b1ea16f12875cc75f470f1f6325/output.c	2022-01-03 17:44:41.929310483 +0800
@@ -27,6 +27,7 @@
 #include <wlr/types/wlr_output.h>
 #include <wlr/types/wlr_output_damage.h>
 #include <wlr/types/wlr_output_layout.h>
+#include <wlr/types/wlr_output_management_v1.h>
 #include <wlr/types/wlr_scene.h>
 #include <wlr/types/wlr_surface.h>
 #include <wlr/types/wlr_xdg_shell.h>
@@ -43,6 +44,25 @@
 #endif
 
 static void
+update_output_manager_config(struct cg_server *server)
+{
+	struct wlr_output_configuration_v1 *config = wlr_output_configuration_v1_create();
+
+	struct cg_output *output;
+	wl_list_for_each (output, &server->outputs, link) {
+		struct wlr_output_configuration_head_v1 *config_head =
+			wlr_output_configuration_head_v1_create(config, output->wlr_output);
+		struct wlr_box *box = wlr_output_layout_get_box(server->output_layout, output->wlr_output);
+		if (box) {
+			config_head->state.x = box->x;
+			config_head->state.y = box->y;
+		}
+	}
+
+	wlr_output_manager_v1_set_configuration(server->output_manager_v1, config);
+}
+
+static void
 output_enable(struct cg_output *output)
 {
 	struct wlr_output *wlr_output = output->wlr_output;
@@ -52,7 +72,23 @@ output_enable(struct cg_output *output)
 	 * duplicate the enabled property in cg_output. */
 	wlr_log(WLR_DEBUG, "Enabling output %s", wlr_output->name);
 
-	wlr_output_layout_add_auto(output->server->output_layout, wlr_output);
+	if (output->server->output_extend_mode == CAGE_OUTPUT_EXTEND_MODE_RIGHT) {
+		int max_x = 0, max_x_y = 0;
+		struct wlr_output_layout_output *l_output;
+		wl_list_for_each (l_output, &output->server->output_layout->outputs, link) {
+			int width, height;
+			wlr_output_effective_resolution(l_output->output, &width, &height);
+			if (l_output->x + width > max_x) {
+				max_x = l_output->x + width;
+				max_x_y = l_output->y;
+			}
+		}
+
+		wlr_output_layout_add(output->server->output_layout, wlr_output, max_x, max_x_y);
+	} else {
+		wlr_output_layout_add_auto(output->server->output_layout, wlr_output);
+	}
+
 	wlr_output_enable(wlr_output, true);
 	wlr_output_commit(wlr_output);
 
@@ -64,6 +100,8 @@ output_enable(struct cg_output *output)
 		}
 	}
 	assert(output->scene_output != NULL);
+
+	update_output_manager_config(output->server);
 }
 
 static void
@@ -82,6 +120,37 @@ output_disable(struct cg_output *output)
 	wlr_output_enable(wlr_output, false);
 	wlr_output_layout_remove(output->server->output_layout, wlr_output);
 	wlr_output_commit(wlr_output);
+
+	update_output_manager_config(output->server);
+}
+
+static void
+output_apply_config(struct cg_output *output, struct wlr_output_configuration_head_v1 *head)
+{
+	struct wlr_output *wlr_output = output->wlr_output;
+
+	wlr_log(WLR_DEBUG, "Applying configuration for output %s", wlr_output->name);
+
+	if (!head->state.enabled) {
+		output_disable(output);
+		return;
+	}
+
+	if (head->state.mode) {
+		wlr_output_set_mode(wlr_output, head->state.mode);
+	} else {
+		wlr_output_set_custom_mode(wlr_output, head->state.custom_mode.width, head->state.custom_mode.height,
+					   head->state.custom_mode.refresh);
+	}
+
+	wlr_output_layout_add(output->server->output_layout, head->state.output, head->state.x, head->state.y);
+	wlr_output_set_scale(wlr_output, head->state.scale);
+	wlr_output_set_transform(wlr_output, head->state.transform);
+
+	wlr_output_enable(wlr_output, true);
+	wlr_output_commit(wlr_output);
+
+	update_output_manager_config(output->server);
 }
 
 static void
@@ -261,3 +330,62 @@ output_set_window_title(struct cg_output
 #endif
 	}
 }
+
+static bool
+output_config_test(struct cg_server *server, struct wlr_output_configuration_v1 *config)
+{
+	/* TODO */
+	return true;
+}
+
+static bool
+output_config_apply(struct cg_server *server, struct wlr_output_configuration_v1 *config)
+{
+	if (!output_config_test(server, config)) {
+		return false;
+	}
+
+	struct wlr_output_configuration_head_v1 *head;
+	wl_list_for_each (head, &config->heads, link) {
+		struct cg_output *output;
+		wl_list_for_each (output, &server->outputs, link) {
+			if (strcmp(head->state.output->name, output->wlr_output->name) == 0) {
+				wlr_log(WLR_INFO, "Applying configuration for output %s", output->wlr_output->name);
+				output_apply_config(output, head);
+				break;
+			}
+		}
+	}
+
+	return true;
+}
+
+void
+handle_output_manager_apply(struct wl_listener *listener, void *data)
+{
+	struct cg_server *server = wl_container_of(listener, server, output_manager_apply);
+	struct wlr_output_configuration_v1 *config = data;
+
+	if (output_config_apply(server, config)) {
+		wlr_output_configuration_v1_send_succeeded(config);
+	} else {
+		wlr_output_configuration_v1_send_failed(config);
+	}
+
+	wlr_output_configuration_v1_destroy(config);
+}
+
+void
+handle_output_manager_test(struct wl_listener *listener, void *data)
+{
+	struct cg_server *server = wl_container_of(listener, server, output_manager_test);
+	struct wlr_output_configuration_v1 *config = data;
+
+	if (output_config_test(server, config)) {
+		wlr_output_configuration_v1_send_succeeded(config);
+	} else {
+		wlr_output_configuration_v1_send_failed(config);
+	}
+
+	wlr_output_configuration_v1_destroy(config);
+}
diff -rupN cage-3321daef98e07b1ea16f12875cc75f470f1f6325-orig/output.h cage-3321daef98e07b1ea16f12875cc75f470f1f6325/output.h
--- cage-3321daef98e07b1ea16f12875cc75f470f1f6325-orig/output.h	2022-01-03 17:44:36.741310651 +0800
+++ cage-3321daef98e07b1ea16f12875cc75f470f1f6325/output.h	2022-01-03 17:44:41.929310483 +0800
@@ -23,5 +23,7 @@ struct cg_output {
 
 void handle_new_output(struct wl_listener *listener, void *data);
 void output_set_window_title(struct cg_output *output, const char *title);
+void handle_output_manager_apply(struct wl_listener *listener, void *data);
+void handle_output_manager_test(struct wl_listener *listener, void *data);
 
 #endif
diff -rupN cage-3321daef98e07b1ea16f12875cc75f470f1f6325-orig/seat.c cage-3321daef98e07b1ea16f12875cc75f470f1f6325/seat.c
--- cage-3321daef98e07b1ea16f12875cc75f470f1f6325-orig/seat.c	2022-01-03 17:44:36.741310651 +0800
+++ cage-3321daef98e07b1ea16f12875cc75f470f1f6325/seat.c	2022-01-03 17:44:44.569310398 +0800
@@ -9,15 +9,19 @@
 #include "config.h"
 
 #include <assert.h>
+#include <errno.h>
+#include <libinput.h>
 #include <linux/input-event-codes.h>
 #include <stdlib.h>
 #include <wayland-server-core.h>
 #include <wlr/backend.h>
+#include <wlr/backend/libinput.h>
 #include <wlr/backend/multi.h>
 #include <wlr/types/wlr_cursor.h>
 #include <wlr/types/wlr_data_device.h>
 #include <wlr/types/wlr_idle.h>
 #include <wlr/types/wlr_keyboard_group.h>
+#include <wlr/types/wlr_pointer_constraints_v1.h>
 #include <wlr/types/wlr_primary_selection.h>
 #include <wlr/types/wlr_scene.h>
 #include <wlr/types/wlr_seat.h>
@@ -186,6 +190,283 @@ handle_pointer_destroy(struct wl_listene
 	update_capabilities(seat);
 }
 
+static bool
+is_enabled(const char *val, bool def)
+{
+	return ((def && (!val || !val[0] || (val[0] != '0'))) || (!def && (val && val[0] && (val[0] != '0'))));
+}
+
+static void
+set_click_method(struct wlr_input_device *device)
+{
+	const char *val;
+	long l;
+	char *end = NULL;
+	enum libinput_config_click_method method = LIBINPUT_CONFIG_CLICK_METHOD_NONE;
+	struct libinput_device *libinput_device;
+	enum libinput_config_status status;
+
+	val = getenv("LIBINPUT_DEFAULT_CLICK_METHOD");
+	if (!val || !val[0]) {
+		return;
+	}
+
+	errno = 0;
+	l = strtol(val, &end, 10);
+	if (errno || (end && *end) ||
+	    ((method != LIBINPUT_CONFIG_CLICK_METHOD_NONE) && (method != LIBINPUT_CONFIG_CLICK_METHOD_BUTTON_AREAS) &&
+	     (method != LIBINPUT_CONFIG_CLICK_METHOD_CLICKFINGER))) {
+		return;
+	}
+	method = (enum libinput_config_click_method) l;
+
+	libinput_device = wlr_libinput_get_device_handle(device);
+
+	status = libinput_device_config_click_set_method(libinput_device, method);
+	if (status != LIBINPUT_CONFIG_STATUS_SUCCESS) {
+		wlr_log(WLR_ERROR, "Failed to set click method for '%s': %s", libinput_device_get_name(libinput_device),
+			libinput_config_status_to_str(status));
+	}
+}
+
+static void
+set_tap(struct wlr_input_device *device)
+{
+	const char *val;
+	enum libinput_config_tap_state state = LIBINPUT_CONFIG_TAP_ENABLED;
+	struct libinput_device *libinput_device;
+	enum libinput_config_status status;
+
+	val = getenv("LIBINPUT_DEFAULT_TAP");
+	if (!val || !val[0]) {
+		return;
+	}
+
+	if (!is_enabled(val, true)) {
+		state = LIBINPUT_CONFIG_TAP_DISABLED;
+	}
+
+	libinput_device = wlr_libinput_get_device_handle(device);
+
+	status = libinput_device_config_tap_set_enabled(libinput_device, state);
+	if (status != LIBINPUT_CONFIG_STATUS_SUCCESS) {
+		wlr_log(WLR_ERROR, "Failed to set tap-to-click state for '%s': %s",
+			libinput_device_get_name(libinput_device), libinput_config_status_to_str(status));
+	}
+}
+
+static void
+set_tap_and_drag(struct wlr_input_device *device)
+{
+	const char *val;
+	enum libinput_config_drag_state state = LIBINPUT_CONFIG_DRAG_DISABLED;
+	struct libinput_device *libinput_device;
+	enum libinput_config_status status;
+
+	val = getenv("LIBINPUT_DEFAULT_DRAG");
+	if (!val || !val[0]) {
+		return;
+	}
+
+	if (is_enabled(val, true)) {
+		state = LIBINPUT_CONFIG_DRAG_ENABLED;
+	}
+
+	libinput_device = wlr_libinput_get_device_handle(device);
+
+	status = libinput_device_config_tap_set_drag_enabled(libinput_device, state);
+	if (status != LIBINPUT_CONFIG_STATUS_SUCCESS) {
+		wlr_log(WLR_ERROR, "Failed to set tap-and-drag state for '%s': %s",
+			libinput_device_get_name(libinput_device), libinput_config_status_to_str(status));
+	}
+}
+
+static void
+set_natural_scroll(struct wlr_input_device *device)
+{
+	const char *val;
+	int enable = 0;
+	struct libinput_device *libinput_device;
+	enum libinput_config_status status;
+
+	val = getenv("LIBINPUT_DEFAULT_NATURAL_SCROLL");
+	if (!val || !val[0]) {
+		return;
+	}
+
+	if (is_enabled(val, false)) {
+		enable = 1;
+	}
+
+	libinput_device = wlr_libinput_get_device_handle(device);
+
+	if (!libinput_device_config_scroll_has_natural_scroll(libinput_device)) {
+		return;
+	}
+
+	status = libinput_device_config_scroll_set_natural_scroll_enabled(libinput_device, enable);
+	if (status != LIBINPUT_CONFIG_STATUS_SUCCESS) {
+		wlr_log(WLR_ERROR, "Failed to set natural scroll state for '%s': %s",
+			libinput_device_get_name(libinput_device), libinput_config_status_to_str(status));
+	}
+}
+
+static void
+set_acceleration(struct wlr_input_device *device)
+{
+	const char *val;
+	double accel = 0;
+	char *end = NULL;
+	struct libinput_device *libinput_device;
+	enum libinput_config_status status;
+
+	val = getenv("LIBINPUT_DEFAULT_ACCELERATION");
+	if (!val || !val[0]) {
+		return;
+	}
+
+	errno = 0;
+	accel = strtod(val, &end);
+	if (errno || (end && *end) || (accel < -1) || (accel > 1)) {
+		return;
+	}
+
+	libinput_device = wlr_libinput_get_device_handle(device);
+
+	if (!libinput_device_config_accel_is_available(libinput_device)) {
+		return;
+	}
+
+	status = libinput_device_config_accel_set_speed(libinput_device, accel);
+	if (status != LIBINPUT_CONFIG_STATUS_SUCCESS) {
+		wlr_log(WLR_ERROR, "Failed to set acceleration for '%s': %s", libinput_device_get_name(libinput_device),
+			libinput_config_status_to_str(status));
+	}
+}
+
+static void
+set_scroll_method(struct wlr_input_device *device)
+{
+	const char *val;
+	enum libinput_config_scroll_method method = LIBINPUT_CONFIG_SCROLL_2FG;
+	long l;
+	char *end = NULL;
+	struct libinput_device *libinput_device;
+	enum libinput_config_status status;
+
+	val = getenv("LIBINPUT_DEFAULT_SCROLL_METHOD");
+	if (!val || !val[0]) {
+		return;
+	}
+
+	errno = 0;
+	l = strtol(val, &end, 10);
+	if (errno || (end && *end) ||
+	    ((method != LIBINPUT_CONFIG_SCROLL_NO_SCROLL) && (method != LIBINPUT_CONFIG_SCROLL_2FG) &&
+	     (method != LIBINPUT_CONFIG_SCROLL_EDGE) && (method != LIBINPUT_CONFIG_SCROLL_ON_BUTTON_DOWN))) {
+		return;
+	}
+	method = (enum libinput_config_scroll_method) l;
+
+	libinput_device = wlr_libinput_get_device_handle(device);
+
+	status = libinput_device_config_scroll_set_method(libinput_device, method);
+	if (status != LIBINPUT_CONFIG_STATUS_SUCCESS) {
+		wlr_log(WLR_ERROR, "Failed to set scroll method for '%s': %s",
+			libinput_device_get_name(libinput_device), libinput_config_status_to_str(status));
+	}
+}
+
+static void
+set_disable_while_typing(struct wlr_input_device *device)
+{
+	const char *val;
+	enum libinput_config_dwt_state state = LIBINPUT_CONFIG_DWT_DISABLED;
+	struct libinput_device *libinput_device;
+	enum libinput_config_status status;
+
+	val = getenv("LIBINPUT_DEFAULT_DISABLE_WHILE_TYPING");
+	if (!val || !val[0]) {
+		return;
+	}
+
+	if (is_enabled(val, false)) {
+		state = LIBINPUT_CONFIG_DWT_ENABLED;
+	}
+
+	libinput_device = wlr_libinput_get_device_handle(device);
+
+	if (!libinput_device_config_dwt_is_available(libinput_device)) {
+		return;
+	}
+
+	status = libinput_device_config_dwt_set_enabled(libinput_device, state);
+	if (status != LIBINPUT_CONFIG_STATUS_SUCCESS) {
+		wlr_log(WLR_ERROR, "Failed to set disable-while-typing state for '%s': %s",
+			libinput_device_get_name(libinput_device), libinput_config_status_to_str(status));
+	}
+}
+
+static void
+set_middle_emulation(struct wlr_input_device *device)
+{
+	const char *val;
+	enum libinput_config_middle_emulation_state state = LIBINPUT_CONFIG_MIDDLE_EMULATION_DISABLED;
+	struct libinput_device *libinput_device;
+	enum libinput_config_status status;
+
+	val = getenv("LIBINPUT_DEFAULT_MIDDLE_EMULATION");
+	if (!val || !val[0]) {
+		return;
+	}
+
+	if (is_enabled(val, false)) {
+		state = LIBINPUT_CONFIG_MIDDLE_EMULATION_ENABLED;
+	}
+
+	libinput_device = wlr_libinput_get_device_handle(device);
+
+	if (!libinput_device_config_middle_emulation_is_available(libinput_device)) {
+		return;
+	}
+
+	status = libinput_device_config_middle_emulation_set_enabled(libinput_device, state);
+	if (status != LIBINPUT_CONFIG_STATUS_SUCCESS) {
+		wlr_log(WLR_ERROR, "Failed to set middle emulation state for '%s': %s",
+			libinput_device_get_name(libinput_device), libinput_config_status_to_str(status));
+	}
+}
+
+static void
+set_left_handed(struct wlr_input_device *device)
+{
+	const char *val;
+	int state = 0;
+	struct libinput_device *libinput_device;
+	enum libinput_config_status status;
+
+	val = getenv("LIBINPUT_DEFAULT_LEFT_HANDED");
+	if (!val || !val[0]) {
+		return;
+	}
+
+	if (is_enabled(val, false)) {
+		state = 1;
+	}
+
+	libinput_device = wlr_libinput_get_device_handle(device);
+
+	if (!libinput_device_config_left_handed_is_available(libinput_device)) {
+		return;
+	}
+
+	status = libinput_device_config_left_handed_set(libinput_device, state);
+	if (status != LIBINPUT_CONFIG_STATUS_SUCCESS) {
+		wlr_log(WLR_ERROR, "Failed to set left-handed mode state for '%s': %s",
+			libinput_device_get_name(libinput_device), libinput_config_status_to_str(status));
+	}
+}
+
 static void
 handle_new_pointer(struct cg_seat *seat, struct wlr_input_device *device)
 {
@@ -195,6 +476,16 @@ handle_new_pointer(struct cg_seat *seat,
 		return;
 	}
 
+	set_click_method(device);
+	set_tap(device);
+	set_tap_and_drag(device);
+	set_natural_scroll(device);
+	set_acceleration(device);
+	set_scroll_method(device);
+	set_disable_while_typing(device);
+	set_middle_emulation(device);
+	set_left_handed(device);
+
 	pointer->seat = seat;
 	pointer->device = device;
 	wlr_cursor_attach_input_device(seat->cursor, device);
@@ -252,7 +543,8 @@ handle_key_event(struct wlr_input_device
 
 	bool handled = false;
 	uint32_t modifiers = wlr_keyboard_get_modifiers(device->keyboard);
-	if ((modifiers & WLR_MODIFIER_ALT) && event->state == WL_KEYBOARD_KEY_STATE_PRESSED) {
+	if ((modifiers & WLR_MODIFIER_ALT) && event->state == WL_KEYBOARD_KEY_STATE_PRESSED &&
+	    !seat->current_constraint) {
 		/* If Alt is held down and this button was pressed, we
 		 * attempt to process it as a compositor
 		 * keybinding. */
@@ -571,7 +863,18 @@ handle_cursor_motion_absolute(struct wl_
 	struct cg_seat *seat = wl_container_of(listener, seat, cursor_motion_absolute);
 	struct wlr_event_pointer_motion_absolute *event = data;
 
-	wlr_cursor_warp_absolute(seat->cursor, event->device, event->x, event->y);
+	double lx, ly;
+	wlr_cursor_absolute_to_layout_coords(seat->cursor, event->device, event->x, event->y, &lx, &ly);
+
+	double dx = lx - seat->cursor->x;
+	double dy = ly - seat->cursor->y;
+
+	wlr_relative_pointer_manager_v1_send_relative_motion(seat->server->relative_pointer_manager, seat->seat,
+							     (uint64_t) event->time_msec * 1000, dx, dy, dx, dy);
+
+	if (!seat->current_constraint) {
+		wlr_cursor_move(seat->cursor, event->device, dx, dy);
+	}
 	process_cursor_motion(seat, event->time_msec);
 	wlr_idle_notify_activity(seat->server->idle, seat->seat);
 }
@@ -580,9 +883,15 @@ static void
 handle_cursor_motion(struct wl_listener *listener, void *data)
 {
 	struct cg_seat *seat = wl_container_of(listener, seat, cursor_motion);
+	struct cg_server *server = seat->server;
 	struct wlr_event_pointer_motion *event = data;
 
-	wlr_cursor_move(seat->cursor, event->device, event->delta_x, event->delta_y);
+	wlr_relative_pointer_manager_v1_send_relative_motion(server->relative_pointer_manager, seat->seat,
+							     (uint64_t) event->time_msec * 1000, event->delta_x,
+							     event->delta_y, event->unaccel_dx, event->unaccel_dy);
+	if (!seat->current_constraint) {
+		wlr_cursor_move(seat->cursor, event->device, event->delta_x, event->delta_y);
+	}
 	process_cursor_motion(seat, event->time_msec);
 	wlr_idle_notify_activity(seat->server->idle, seat->seat);
 }
@@ -786,6 +1095,8 @@ seat_create(struct cg_server *server, st
 	wl_list_init(&seat->pointers);
 	wl_list_init(&seat->touch);
 
+	wl_list_init(&seat->constraint_commit.link);
+
 	seat->new_input.notify = handle_new_input;
 	wl_signal_add(&backend->events.new_input, &seat->new_input);
 
@@ -867,5 +1178,76 @@ seat_set_focus(struct cg_seat *seat, str
 		wlr_seat_keyboard_notify_enter(wlr_seat, view->wlr_surface, NULL, 0, NULL);
 	}
 
+	struct wlr_pointer_constraint_v1 *constraint =
+		wlr_pointer_constraints_v1_constraint_for_surface(server->constraints, view->wlr_surface, wlr_seat);
+	seat_constrain_cursor(server, constraint);
+
 	process_cursor_motion(seat, -1);
 }
+
+static void
+handle_constraint_commit(struct wl_listener *listener, void *data)
+{
+}
+
+static void
+destroy_constraint(struct wl_listener *listener, void *data)
+{
+	struct cg_constraint *constraint = wl_container_of(listener, constraint, destroy);
+	struct wlr_pointer_constraint_v1 *wlr_constraint = data;
+	struct cg_seat *seat = constraint->seat;
+
+	wl_list_remove(&constraint->destroy.link);
+	if (seat->current_constraint == wlr_constraint) {
+		if (seat->constraint_commit.link.next != NULL) {
+			wl_list_remove(&seat->constraint_commit.link);
+		}
+		wl_list_init(&seat->constraint_commit.link);
+		seat->current_constraint = NULL;
+	}
+
+	free(constraint);
+}
+
+void
+seat_create_constraint(struct wl_listener *listener, void *data)
+{
+	struct wlr_pointer_constraint_v1 *wlr_constraint = data;
+	struct cg_server *server = wl_container_of(listener, server, new_constraint);
+	struct cg_view *view;
+	struct cg_constraint *constraint = calloc(1, sizeof(struct cg_constraint));
+
+	constraint->constraint = wlr_constraint;
+	constraint->seat = server->seat;
+	constraint->destroy.notify = destroy_constraint;
+	wl_signal_add(&wlr_constraint->events.destroy, &constraint->destroy);
+
+	view = seat_get_focus(server->seat);
+	if (view->wlr_surface == wlr_constraint->surface) {
+		seat_constrain_cursor(server, wlr_constraint);
+	}
+}
+
+void
+seat_constrain_cursor(struct cg_server *server, struct wlr_pointer_constraint_v1 *constraint)
+{
+	struct cg_seat *seat = server->seat;
+	if (seat->current_constraint == constraint) {
+		return;
+	}
+	wl_list_remove(&seat->constraint_commit.link);
+	if (seat->current_constraint) {
+		wlr_pointer_constraint_v1_send_deactivated(seat->current_constraint);
+	}
+
+	seat->current_constraint = constraint;
+
+	if (constraint == NULL) {
+		wl_list_init(&seat->constraint_commit.link);
+		return;
+	}
+
+	wlr_pointer_constraint_v1_send_activated(constraint);
+	seat->constraint_commit.notify = handle_constraint_commit;
+	wl_signal_add(&constraint->surface->events.commit, &seat->constraint_commit);
+}
diff -rupN cage-3321daef98e07b1ea16f12875cc75f470f1f6325-orig/seat.h cage-3321daef98e07b1ea16f12875cc75f470f1f6325/seat.h
--- cage-3321daef98e07b1ea16f12875cc75f470f1f6325-orig/seat.h	2022-01-03 17:44:36.741310651 +0800
+++ cage-3321daef98e07b1ea16f12875cc75f470f1f6325/seat.h	2022-01-03 17:44:41.929310483 +0800
@@ -27,11 +27,13 @@ struct cg_seat {
 
 	struct wlr_cursor *cursor;
 	struct wlr_xcursor_manager *xcursor_manager;
+	struct wlr_pointer_constraint_v1 *current_constraint;
 	struct wl_listener cursor_motion;
 	struct wl_listener cursor_motion_absolute;
 	struct wl_listener cursor_button;
 	struct wl_listener cursor_axis;
 	struct wl_listener cursor_frame;
+	struct wl_listener constraint_commit;
 
 	int32_t touch_id;
 	double touch_lx;
@@ -85,9 +87,18 @@ struct cg_drag_icon {
 	struct wl_listener destroy;
 };
 
+struct cg_constraint {
+	struct cg_seat *seat;
+	struct wlr_pointer_constraint_v1 *constraint;
+	struct wl_listener destroy;
+};
+
 struct cg_seat *seat_create(struct cg_server *server, struct wlr_backend *backend);
 void seat_destroy(struct cg_seat *seat);
 struct cg_view *seat_get_focus(struct cg_seat *seat);
 void seat_set_focus(struct cg_seat *seat, struct cg_view *view);
 
+void seat_create_constraint(struct wl_listener *listener, void *data);
+void seat_constrain_cursor(struct cg_server *server, struct wlr_pointer_constraint_v1 *constraint);
+
 #endif
diff -rupN cage-3321daef98e07b1ea16f12875cc75f470f1f6325-orig/server.h cage-3321daef98e07b1ea16f12875cc75f470f1f6325/server.h
--- cage-3321daef98e07b1ea16f12875cc75f470f1f6325-orig/server.h	2022-01-03 17:44:36.741310651 +0800
+++ cage-3321daef98e07b1ea16f12875cc75f470f1f6325/server.h	2022-01-03 17:44:41.929310483 +0800
@@ -7,6 +7,8 @@
 #include <wlr/types/wlr_idle.h>
 #include <wlr/types/wlr_idle_inhibit_v1.h>
 #include <wlr/types/wlr_output_layout.h>
+#include <wlr/types/wlr_pointer_constraints_v1.h>
+#include <wlr/types/wlr_relative_pointer_v1.h>
 #include <wlr/types/wlr_xdg_decoration_v1.h>
 #if CAGE_HAS_XWAYLAND
 #include <wlr/xwayland.h>
@@ -21,6 +23,11 @@ enum cg_multi_output_mode {
 	CAGE_MULTI_OUTPUT_MODE_LAST,
 };
 
+enum cg_output_extend_mode {
+	CAGE_OUTPUT_EXTEND_MODE_AUTO,
+	CAGE_OUTPUT_EXTEND_MODE_RIGHT,
+};
+
 struct cg_server {
 	struct wl_display *wl_display;
 	struct wl_list views;
@@ -35,6 +42,7 @@ struct cg_server {
 	struct wl_list inhibitors;
 
 	enum cg_multi_output_mode output_mode;
+	enum cg_output_extend_mode output_extend_mode;
 	struct wlr_output_layout *output_layout;
 	struct wlr_scene *scene;
 	/* Includes disabled outputs; depending on the output_mode
@@ -42,11 +50,18 @@ struct cg_server {
 	struct wl_list outputs; // cg_output::link
 	struct wl_listener new_output;
 
+	struct wlr_relative_pointer_manager_v1 *relative_pointer_manager;
+	struct wlr_pointer_constraints_v1 *constraints;
+	struct wl_listener new_constraint;
+
 	struct wl_listener xdg_toplevel_decoration;
 	struct wl_listener new_xdg_shell_surface;
 #if CAGE_HAS_XWAYLAND
 	struct wl_listener new_xwayland_surface;
 #endif
+	struct wlr_output_manager_v1 *output_manager_v1;
+	struct wl_listener output_manager_apply;
+	struct wl_listener output_manager_test;
 
 	bool xdg_decoration;
 	bool allow_vt_switch;
