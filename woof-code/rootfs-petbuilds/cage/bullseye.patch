diff -rupN wlroots-0.15.0-orig/backend/drm/drm.c wlroots-0.15.0/backend/drm/drm.c
--- wlroots-0.15.0-orig/backend/drm/drm.c	2021-12-18 14:57:19.903971830 +0200
+++ wlroots-0.15.0/backend/drm/drm.c	2021-12-18 14:57:23.655971709 +0200
@@ -142,9 +142,17 @@ static bool add_plane(struct wlr_drm_bac
 			goto error;
 		}
 
-		drmModeFormatModifierIterator iter = {0};
-		while (drmModeFormatModifierBlobIterNext(blob, &iter)) {
-			wlr_drm_format_set_add(&p->formats, iter.fmt, iter.mod);
+		struct drm_format_modifier_blob *data = blob->data;
+		uint32_t *fmts = (uint32_t *)((char *)data + data->formats_offset);
+		struct drm_format_modifier *mods = (struct drm_format_modifier *)
+			((char *)data + data->modifiers_offset);
+		for (uint32_t i = 0; i < data->count_modifiers; ++i) {
+			for (int j = 0; j < 64; ++j) {
+				if (mods[i].formats & ((uint64_t)1 << j)) {
+					wlr_drm_format_set_add(&p->formats,
+						fmts[j + mods[i].offset], mods[i].modifier);
+				}
+			}
 		}
 
 		drmModeFreePropertyBlob(blob);
diff -rupN wlroots-0.15.0-orig/backend/drm/legacy.c wlroots-0.15.0/backend/drm/legacy.c
--- wlroots-0.15.0-orig/backend/drm/legacy.c	2021-12-18 14:57:19.903971830 +0200
+++ wlroots-0.15.0/backend/drm/legacy.c	2021-12-18 14:57:23.655971709 +0200
@@ -151,13 +151,9 @@ static bool legacy_crtc_commit(struct wl
 
 		int ret = drmModeSetCursor(drm->fd, crtc->id, cursor_handle,
 			cursor_width, cursor_height);
-		int set_cursor_errno = errno;
-		if (drmCloseBufferHandle(drm->fd, cursor_handle) != 0) {
-			wlr_log_errno(WLR_ERROR, "drmCloseBufferHandle failed");
-		}
+		close_bo_handle(drm->fd, cursor_handle);
 		if (ret != 0) {
-			wlr_drm_conn_log(conn, WLR_DEBUG, "drmModeSetCursor failed: %s",
-				strerror(set_cursor_errno));
+			wlr_drm_conn_log_errno(conn, WLR_DEBUG, "drmModeSetCursor failed");
 			return false;
 		}
 
diff -rupN wlroots-0.15.0-orig/backend/drm/renderer.c wlroots-0.15.0/backend/drm/renderer.c
--- wlroots-0.15.0-orig/backend/drm/renderer.c	2021-12-18 14:57:19.903971830 +0200
+++ wlroots-0.15.0/backend/drm/renderer.c	2021-12-18 14:57:23.655971709 +0200
@@ -271,9 +271,7 @@ static void close_all_bo_handles(struct
 			continue;
 		}
 
-		if (drmCloseBufferHandle(drm->fd, handles[i]) != 0) {
-			wlr_log_errno(WLR_ERROR, "drmCloseBufferHandle failed");
-		}
+		close_bo_handle(drm->fd, handles[i]);
 	}
 }
 
diff -rupN wlroots-0.15.0-orig/backend/drm/util.c wlroots-0.15.0/backend/drm/util.c
--- wlroots-0.15.0-orig/backend/drm/util.c	2021-12-18 14:57:19.903971830 +0200
+++ wlroots-0.15.0/backend/drm/util.c	2021-12-18 14:57:23.655971709 +0200
@@ -320,3 +320,14 @@ size_t match_obj(size_t num_objs, const
 	match_obj_(&st, 0, 0, 0, 0);
 	return st.score;
 }
+
+void close_bo_handle(int drm_fd, uint32_t handle) {
+	if (handle == 0) {
+		return;
+	}
+
+	struct drm_gem_close args = { .handle = handle };
+	if (drmIoctl(drm_fd, DRM_IOCTL_GEM_CLOSE, &args) != 0) {
+		wlr_log_errno(WLR_ERROR, "drmIoctl(GEM_CLOSE) failed");
+	}
+}
diff -rupN wlroots-0.15.0-orig/backend/session/session.c wlroots-0.15.0/backend/session/session.c
--- wlroots-0.15.0-orig/backend/session/session.c	2021-12-18 14:57:19.907971830 +0200
+++ wlroots-0.15.0/backend/session/session.c	2021-12-18 14:57:23.655971709 +0200
@@ -368,6 +368,17 @@ bool wlr_session_change_vt(struct wlr_se
 	return libseat_switch_session(session->seat_handle, vt) == 0;
 }
 
+/* https://gitlab.freedesktop.org/mesa/drm/-/blob/5d97031e8aa717c83993fcdaa45b0812ddceb3b0/xf86drmMode.c#L152 */
+static int compat_drmIsKMS(int fd)
+{
+	struct drm_mode_card_res res = {0};
+
+	if (drmIoctl(fd, DRM_IOCTL_MODE_GETRESOURCES, &res) != 0)
+		return 0;
+
+	return res.count_crtcs > 0 && res.count_connectors > 0 && res.count_encoders > 0;
+}
+
 /* Tests if 'path' is KMS compatible by trying to open it. Returns the opened
  * device on success. */
 struct wlr_device *session_open_if_kms(struct wlr_session *restrict session,
@@ -381,7 +392,7 @@ struct wlr_device *session_open_if_kms(s
 		return NULL;
 	}
 
-	if (!drmIsKMS(dev->fd)) {
+	if (!compat_drmIsKMS(dev->fd)) {
 		wlr_log(WLR_DEBUG, "Ignoring '%s': not a KMS device", path);
 		wlr_session_close_file(session, dev);
 		return NULL;
diff -rupN wlroots-0.15.0-orig/backend/wayland/backend.c wlroots-0.15.0/backend/wayland/backend.c
--- wlroots-0.15.0-orig/backend/wayland/backend.c	2021-12-18 14:57:19.907971830 +0200
+++ wlroots-0.15.0/backend/wayland/backend.c	2021-12-18 14:57:23.655971709 +0200
@@ -157,6 +157,7 @@ static void linux_dmabuf_feedback_v1_han
 
 	feedback_data->main_device_id = dev_id;
 
+#if 0
 	drmDevice *device = NULL;
 	if (drmGetDeviceFromDevId(dev_id, 0, &device) != 0) {
 		wlr_log_errno(WLR_ERROR, "drmGetDeviceFromDevId failed");
@@ -178,6 +179,7 @@ static void linux_dmabuf_feedback_v1_han
 	feedback_data->backend->drm_render_name = strdup(name);
 
 	drmFreeDevice(&device);
+#endif
 }
 
 static void linux_dmabuf_feedback_v1_handle_tranche_done(void *data,
diff -rupN wlroots-0.15.0-orig/include/backend/drm/util.h wlroots-0.15.0/include/backend/drm/util.h
--- wlroots-0.15.0-orig/include/backend/drm/util.h	2021-12-18 14:57:19.915971830 +0200
+++ wlroots-0.15.0/include/backend/drm/util.h	2021-12-18 14:57:23.655971709 +0200
@@ -36,4 +36,11 @@ size_t match_obj(size_t num_objs, const
 		size_t num_res, const uint32_t res[static restrict num_res],
 		uint32_t out[static restrict num_res]);
 
+/**
+ * Close a GEM buffer handle.
+ *
+ * TODO: replace with drmCloseBufferHandle.
+ */
+void close_bo_handle(int drm_fd, uint32_t handle);
+
 #endif
diff -rupN wlroots-0.15.0-orig/meson.build wlroots-0.15.0/meson.build
--- wlroots-0.15.0-orig/meson.build	2021-12-18 14:57:19.911971830 +0200
+++ wlroots-0.15.0/meson.build	2021-12-18 14:57:23.655971709 +0200
@@ -105,7 +105,7 @@ wayland_server = dependency('wayland-ser
 )
 
 drm = dependency('libdrm',
-	version: '>=2.4.109',
+	version: '>=2.4.104',
 	fallback: ['libdrm', 'ext_libdrm'],
 	default_options: [
 		'libkms=false',
