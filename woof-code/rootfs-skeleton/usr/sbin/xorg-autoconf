#!/bin/bash
#written by mistfire
#automatically generate xorg configuration

MODLIST="$(busybox lsmod)"
PCILIST="$(busybox lspci 2>/dev/null)"
XORG_PATHS="/usr/lib/X11 /usr/lib/xorg /usr/lib64/X11 /usr/lib64/xorg"

[ "$MODLIST" == "" ] && MODLIST="$(lsmod 2>/dev/null)" 
[ "$PCILIST" == "" ] && PCILIST="$(lspci -nD 2>/dev/null | sed "s#^0000:##g")" 

probe_intel(){

 devid="$(echo "$1" | cut -f 2 -d ':')"
 cnum="$2"
 bid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ' | sed -e "s#^0##g" -e "s#:0#:#g" -e "s#\.#:#g")"

 accel=""

case $devid in
 7800)
  drv="i740"
 ;;
 0412|2562|2772|27a2|27ae|5a85|0126)
  drv="intel"
  accel="uxa"
 ;;
 1240|1132|3577|a001|a011|0042|0046)
  drv="intel"
 ;;
 010a|0102|0116|0126|0112|0122)
  drv="intel"
 ;;
 015a|0152|0162|0166|016a)
  drv="intel"
 ;;
 2e5b|8108|8109|4102|0be*)
  if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^gma500_gfx|^cedarview_gfx")" != "" ]; then
   drv="modesetting"
  else
   if [ -e /sys/firmware/efi ]; then
	drv="fbdev"
   else
	if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
     drv="fbdev"
    else
     drv="vesa"
    fi
   fi
  fi
 ;;
 712*|27a*|358*|258*)
  drv="intel"
 ;;
 29?2|25?2|2a?2|2e?2)
  drv="intel"
 ;;
 *)
  if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^i[0-9][0-9][0-9]")" != "" ]; then
   drv="modesetting"
   accel="glamor"
  else
    if [ -e /sys/firmware/efi ]; then
     drv="fbdev"
    else
	  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
	   drv="fbdev"
	  else
	   drv="vesa"
	  fi
    fi
  fi
 ;;
esac


drvfound=""

for xpath in $XORG_PATHS
do
 if [ -e $xpath/modules/drivers/${drv}_drv.so ]; then
  drvfound="1"
  break
 fi
done

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
  accel=""
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
   accel=""
  else
   drv="vesa"
   accel=""
  fi
 fi
fi

if [ "$accel" != "" ]; then

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	Option      "AccelMethod" "'$accel'"
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'
 
else

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'

fi

}

probe_amd(){

devid="$(echo "$1" | cut -f 2 -d ':')"
cnum="$2"
bid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ' | sed -e "s#^0##g" -e "s#:0#:#g" -e "s#\.#:#g")"

case $devid in
15dd|683f|6800|6819|6798|679a|67b1|67b0|665c|665f|6938|7300|67ef|67df|699f|67ff|6fdf|9874|aad8|aae8)
 if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^amdgpu")" != "" ]; then
  drv="amdgpu"
  accel=""
 else
  drv="radeon"
  accel=""
 fi
;;
661*|693*|686*|69a*|66a*|731*)
 if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^amdgpu")" != "" ]; then
  drv="amdgpu"
  accel=""
 else
  drv="radeon"
  accel=""
 fi
;;
2081)
 drv="geode"
 accel=""
;;
4742|4744|4749|474d|474e|474f|4750|4752|4753|4756|4757|4759|475a)
 drv="r128"
 accel=""
;;
4c46|4c47|4c49|4c4d|4c50|4c52|4d46|5050|5052)
 drv="r128"
 accel=""
;;
5046|5245|5246|524b|524c|5346|534d|5446|5452)
 drv="r128"
 accel=""
;;
4354|4358|4554|4654|4754|4755|4758|4c42|4c54|5354|5654|5655|5656)
 drv="mach64"
 accel=""
;;
424*|4c6*|496*|4f7*|783*|4a*|4e*|414*|56*|5b*|5e*|71*|79*)
 drv="radeon"
 accel="exa"
;;
5157|5159|514*|546*|594*|564*|565*|585*|587*|595*|596*|5c6*|5d4*)
 drv="radeon"
 accel="exa"
;;
7210|66*|67*|68*|94*|95*|96*|97*|98*|99*|aa*)
 drv="radeon"
 accel="exa"
;;
*)
 drv="ati"
 accel=""
;;
esac

drvfound=""

for xpath in $XORG_PATHS
do
 if [ -e $xpath/modules/drivers/${drv}_drv.so ]; then
  drvfound="1"
  break
 fi
done

if [ "$drvfound" == "" ] && [ "$drv" == "amdgpu" ]; then

	for xpath in $XORG_PATHS
	do
	 if [ -e $xpath/modules/drivers/radeon_drv.so ]; then
	  drvfound="1"
	  break
	 fi
	done
	
	if [ "$drvfound" != "" ]; then
	  drv="radeon"
	  accel=""
	elif [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^amdgpu")" != "" ]; then
	  drv="modesetting"
	  accel=""
	fi
	
fi


if [ "$drvfound" == "" ] && [ "$drv" != "ati" ]; then

	for xpath in $XORG_PATHS
	do
	 if [ -e $xpath/modules/drivers/ati_drv.so ]; then
	  drvfound="1"
	  break
	 fi
	done
	
	if [ "$drvfound" != "" ]; then
	 drv="ati"
	 accel=""
	fi
	
fi


if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
  accel=""
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
   accel=""
  else
   drv="vesa"
   accel=""
  fi
 fi
fi


if [ "$accel" != "" ]; then

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	Option 		"AccelMethod" "'$accel'"
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'

else

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'

fi
	
}

write_generic(){
	
devid="$(echo "$1" | cut -f 2 -d ':')"
cnum="$2"
drvname="$3"
bid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ' | sed -e "s#^0##g" -e "s#:0#:#g" -e "s#\.#:#g")"

drvfound=""

for xpath in $XORG_PATHS
do
 if [ -e $xpath/modules/drivers/${drv}_drv.so ]; then
  drvfound="1"
  break
 fi
done

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
   accel=""
  else
   drv="vesa"
   accel=""
  fi
 fi
fi
		
echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drvname'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'	
	
}

probe_s3(){

devid="$(echo "$1" | cut -f 2 -d ':')"
cnum="$2"
bid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ' | sed -e "s#^0##g" -e "s#:0#:#g" -e "s#\.#:#g")"

case $devid in
8c03|8c02|8c01|8c00|8a10|8a01|883d|5631)
 drv="s3virge"
;;
9102|8e26|8c2*|8d0*|8c1*|8a2*)
 drv="savage"
;;
*)
 drv="s3"
;;
esac

drvfound=""

for xpath in $XORG_PATHS
do
 if [ -e $xpath/modules/drivers/${drv}_drv.so ]; then
  drvfound="1"
  break
 fi
done

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
   accel=""
  else
   drv="vesa"
   accel=""
  fi
 fi
fi

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'
	
}

probe_3dfx(){

devid="$(echo "$1" | cut -f 2 -d ':')"
cnum="$2"
bid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ' | sed -e "s#^0##g" -e "s#:0#:#g" -e "s#\.#:#g")"

case $devid in
0001|0002)
 drv="voodoo"
;;
*)
 drv="tdfx"
;;
esac

drvfound=""

for xpath in $XORG_PATHS
do
 if [ -e $xpath/modules/drivers/${drv}_drv.so ]; then
  drvfound="1"
  break
 fi
done

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
   accel=""
  else
   drv="vesa"
   accel=""
  fi
 fi
fi

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'
	
}

probe_xgi(){

devid="$(echo "$1" | cut -f 2 -d ':')"
cnum="$2"
bid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ' | sed -e "s#^0##g" -e "s#:0#:#g" -e "s#\.#:#g")"

case $devid in
0047)
 drv="xgixp"
;;
*)
 drv="xgi"
;;
esac

drvfound=""

for xpath in $XORG_PATHS
do
 if [ -e $xpath/modules/drivers/${drv}_drv.so ]; then
  drvfound="1"
  break
 fi
done

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
   accel=""
  else
   drv="vesa"
   accel=""
  fi
 fi
fi

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'
	
}

probe_nvidia(){

 devid="$(echo "$1" | cut -f 2 -d ':')"
 cnum="$2"
 bid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ' | sed -e "s#^0##g" -e "s#:0#:#g" -e "s#\.#:#g")"

 drvfound=""	

 case $devid in
 0018|0019)
  if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^nvidia")" != "" ]; then
   drv="nvidia"
  else
   drv="nv"
  fi
 ;;
 *)
  if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^nvidia")" != "" ]; then
   drv="nvidia"
  else
   drv="nouveau"
  fi
 ;;
 esac	
 
drvfound=""

for xpath in $XORG_PATHS
do
 if [ -e $xpath/modules/drivers/${drv}_drv.so ]; then
  drvfound="1"
  break
 fi
done

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
  else
   drv="vesa"
  fi
 fi
fi
		
echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drvname'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'
 
	
}

probe_via(){

 devid="$(echo "$1" | cut -f 2 -d ':')"
 cnum="$2"
 bid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ' | sed -e "s#^0##g" -e "s#:0#:#g" -e "s#\.#:#g")"

 drvfound=""	

  if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^via_chrome")" != "" ]; then
   drv="via"
  else
   drv="openchrome"
  fi
 
drvfound=""

for xpath in $XORG_PATHS
do
 if [ -e $xpath/modules/drivers/${drv}_drv.so ]; then
  drvfound="1"
  break
 fi
done

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
  else
   drv="vesa"
  fi
 fi
fi
		
echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drvname'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'
 
	
}

write_nodrv(){
	
devid="$(echo "$1" | cut -f 2 -d ':')"
cnum="$2"
drvname="$3"
bid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ' | sed -e "s#^0##g" -e "s#:0#:#g" -e "s#\.#:#g")"
		
echo 'Section "Device"
	Identifier  "Card'$cnum'"
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'	
	
}

xorg_mod_path=""

#Look for xorg module path
for xpath in $XORG_PATHS
do
 if [ -e $xpath/modules ]; then
  xorg_mod_path="$xpath/modules"
  break
 fi
done

#Look for available input drivers
if [ ! -e $xorg_mod_path/input/kbd_drv.so ]; then
 KBDRV=""
else
 KBDRV="kbd"
fi

if [ ! -e $xorg_mod_path/input/mouse_drv.so ]; then
  MOUSEDRV=""
else
  MOUSEDRV="mouse"
fi

if [ "$KBDRV" == "" ] || [ "$MOUSEDRV" == "" ]; then
 AUTOADD="true"
else
 AUTOADD="false"
fi

#Setup server layout input devices
if [ "$MOUSEDRV" != "" ]; then
 MOUSEDEV='InputDevice    "Mouse0" "CorePointer"'
 SYNAPDEV='#	InputDevice "Synaptics Mouse" "AlwaysCore" #serverlayoutsynaptics'
else
 MOUSEDEV='#InputDevice    "Mouse0" "CorePointer"'
 SYNAPDEV=''
fi

if [ "$KBDRV" != "" ]; then
 KBDEV='InputDevice    "Keyboard0" "CoreKeyboard"'
else
 KBDEV='#InputDevice    "Keyboard0" "CoreKeyboard"'
fi

#Generate Server Flags Section
echo '# **********************************************************************
# Server flags section.
# **********************************************************************

Section "ServerFlags"

# Uncomment this to disable the <Crtl><Alt><Fn> VT switch sequence
# (where n is 1 through 12).  This allows clients to receive these key
# events.

#    Option "DontVTSwitch"

# Enables mode switching with xrandr
# There is a report that this can cause Xorg not to work on some
# video hardware, so default is commented-out...
# but i want to use it in xorgwizard so leave on...

    Option "RandR" "on"

# With this, Xorg wont talk to HAL to add evdev devices and youll be back
# with the old Xorg behavior (pre-7.4)...

    Option "AutoAddDevices" "'$AUTOADD'"

# For no-Hal, kirk also suggests this...

#    Option "AllowMouseOpenFail" "true"

# Xorg 7.4, Ubuntu Jaunty, CTRL-ALT-BACKSPACE is disabled by default...

    Option "DontZap" "false"

EndSection


Section "ServerLayout"
'$SYNAPDEV'
	Identifier     "X.org Configured"
	Screen      0  "Screen0" 0 0
	'$MOUSEDEV'
	'$KBDEV'
EndSection


Section "Files"
	ModulePath   "'$xorg_mod_path'"
	FontPath     "/usr/share/fonts/local"
	FontPath     "/usr/share/fonts/TTF"
	FontPath     "/usr/share/fonts/OTF"
	FontPath     "/usr/share/fonts/Type1"
	FontPath     "/usr/share/fonts/misc"
	FontPath     "/usr/share/fonts/CID"
	FontPath     "/usr/share/fonts/75dpi/:unscaled"
	FontPath     "/usr/share/fonts/100dpi/:unscaled"
	FontPath     "/usr/share/fonts/75dpi"
	FontPath     "/usr/share/fonts/100dpi"
	FontPath     "/usr/share/fonts/cyrillic"
	FontPath     "/usr/share/fonts/X11/misc/"
	FontPath     "/usr/share/fonts/X11/TTF/"
	FontPath     "/usr/share/fonts/X11/OTF/"
	FontPath     "/usr/share/fonts/X11/Type1/"
	FontPath     "/usr/share/fonts/X11/100dpi/"
	FontPath     "/usr/share/fonts/X11/75dpi/"
EndSection

'

xorg_mods=$(ls "$xorg_mod_path/extensions" 2>/dev/null | grep -vE "\.la" | sed -e "s#^lib##g" -e "s#\.so\$##g" -e "s#\.o\$##g" -e "s#\.a\$##g")

if [ "$xorg_mods" != "" ]; then

echo 'Section "Module"
#	Load "synaptics" #loadsynaptics'
	for xmod in $xorg_mods
	do
	 echo '	Load  "'$xmod'"'
	done 
echo 'EndSection

'

fi

#Generate keyboard config
if [ "$KBDRV" == "kbd" ]; then

echo 'Section "InputDevice"
	Identifier  "Keyboard0"
	Driver      "kbd"
	Option      "XkbRules" "xorg"
	Option      "XkbModel" "pc102" #xkbmodel0
	Option      "XkbLayout" "us" #xkeymap0
	#Option      "XkbVariant" "" #xkbvariant0
	Option      "XkbOptions" "terminate:ctrl_alt_bksp" #xkboptions0
EndSection
'

fi

#Generate mouse config
if [ "$MOUSEDRV" == "mouse" ]; then

echo 'Section "InputDevice"
	Identifier  "Mouse0"
	Driver      "mouse"
	Option	    "Protocol" "IMPS/2" #mouse0protocol
	Option	    "Device" "/dev/mouse"
	#Option      "Emulate3Buttons"
	#Option      "Emulate3Timeout" "50"
	Option      "ZAxisMapping" "4 5" #scrollwheel
EndSection
'

fi

#Generate Monitor and Modes Section
echo 'Section "Monitor"
	Identifier   "Monitor0"
	VendorName   "Monitor Vendor"
	ModelName    "Monitor Model"
	HorizSync    35-81
	VertRefresh  59-76
	#UseModes     "Modes0" #monitor0usemodes
#	Option      "PreferredMode" "1024x768" #monitor0prefmode
EndSection


Section "Modes"
	Identifier "Modes0"
	#modes0modeline0
EndSection

'

#Probe video cards and generate configuration

vcards=$(ls /sys/class/drm/card*/device/vendor | sed -e "s#\/device\/vendor##g" | xargs basename)

for vcard in $vcards
do

	vid="$(cat /sys/class/drm/$vcard/device/vendor | cut -f 2 -d 'x' 2>/dev/null)"
	dvid="$(cat /sys/class/drm/$vcard/device/device | cut -f 2 -d 'x' 2>/dev/null)"
	cnum="$(echo $vcard | sed -e "s#card##g" 2>/dev/null)"

	case $vid in
		8086) probe_intel "${vid}:${dvid}" "$cnum" ;;
		1002|1022) probe_amd "${vid}:${dvid}" "$cnum" ;;
		5333) probe_s3 "${vid}:${dvid}" "$cnum" ;;
		121a) probe_3dfx "${vid}:${dvid}" "$cnum" ;;
		18ca) probe_xgi "${vid}:${dvid}" "$cnum" ;;
		10de) probe_nvidia "${vid}:${dvid}" "$cnum" ;;
		1412|1106) probe_via "${vid}:${dvid}" "$cnum" ;;
		1013) write_generic "${vid}:${dvid}" "$cnum" cirrus ;;
		1039) write_generic "${vid}:${dvid}" "$cnum" sis ;;
		15ad) write_generic "${vid}:${dvid}" "$cnum" vmware ;;
		102b) write_generic "${vid}:${dvid}" "$cnum" mga ;;
		10c8) write_generic "${vid}:${dvid}" "$cnum" neomagic ;;
		100c) write_generic "${vid}:${dvid}" "$cnum" tseng ;;
		1023) write_generic "${vid}:${dvid}" "$cnum" trident ;;
		1a03) write_generic "${vid}:${dvid}" "$cnum" ast ;;
		1142) write_generic "${vid}:${dvid}" "$cnum" apm ;;
		edd8) write_generic "${vid}:${dvid}" "$cnum" ark ;;
		102c) write_generic "${vid}:${dvid}" "$cnum" chips ;;
		1115|104c) write_generic "${vid}:${dvid}" "$cnum" glint ;;
		105d) write_generic "${vid}:${dvid}" "$cnum" chips ;;
		126f) write_generic "${vid}:${dvid}" "$cnum" siliconmotion ;;
		1011) write_generic "${vid}:${dvid}" "$cnum" tga ;;
		1023) write_generic "${vid}:${dvid}" "$cnum" trident ;;
		1078) write_generic "${vid}:${dvid}" "$cnum" cyrix ;;
		10a9) write_generic "${vid}:${dvid}" "$cnum" newport ;;
		100b) write_generic "${vid}:${dvid}" "$cnum" nsc ;;
		1163) write_generic "${vid}:${dvid}" "$cnum" rendition ;;
		15ad|fffe) write_generic "${vid}:${dvid}" "$cnum" vmware ;;
		*) write_nodrv ;;
	esac

done

scrnum=0

#Generate Screen Section
echo '
Section "Screen"
	Identifier "Screen0"
#	Device     "Card0"
	Monitor    "Monitor0"
#	DefaultDepth 24
	#Option         "metamodes" "1280x800_60 +0+0" #METAMODES_0
	Subsection "Display"
		Depth       24 #screen0depth
#		Modes       "1024x768" #screen0modes
	EndSubsection
EndSection
'
